{
	"openapi": "3.0.3",
	"info": {
		"title": "Swagger Contacts API",
		"version": "1.0.0"
	},
	"servers": [
		{
			"url": "http://localhost:4000"
		}
	],
	"tags": [
		{
			"name": "Auth",
			"description": "Authentification API's"
		},
		{
			"name": "Recipes",
			"description": "Recipes endpoints"
		},
		{
			"name": "User",
			"description": "Update user Data"
		}
	],
	"paths": {
		"/auth/register": {
			"post": {
				"tags": ["Auth"],
				"summary": "Adds a new user",
				"operationId": "registerNewUser",
				"requestBody": {
					"description": "Create a new User in the store",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"example": "John Smith"
									},
									"email": {
										"type": "string",
										"example": "example@gmail.com"
									},
									"password": {
										"type": "string",
										"example": "MyPassword1"
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Please verify your email",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"409": {
						"description": "Email in use"
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"tags": ["Auth"],
				"summary": "Log In to the system",
				"operationId": "logInUser",
				"requestBody": {
					"description": "Log In to the system",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"example": "example@gmail.com"
									},
									"password": {
										"type": "string",
										"example": "MyPassword1"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Unauthorized. Email or password is wrong"
					}
				}
			}
		},
		"/user": {
			"put": {
				"tags": ["User"],
				"summary": "Update user information",
				"operationId": "updateUserInformation",
				"requestBody": {
					"description": "Update name or avatar or both",
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"example": "John Smith"
									},
									"avatar": {
										"type": "string",
										"format": "binary"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"example": 200
										},
										"message": {
											"type": "string",
											"example": "Success"
										},
										"data": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string",
													"example": "John"
												},
												"avatar": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/user/logout": {
			"post": {
				"tags": ["User"],
				"summary": "Log out current user",
				"operationId": "logOutCurrentUser",
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"description": "User should be logged in",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": 204,
										"message": {
											"type": "string",
											"example": "Logout success"
										}
									}
								}
							}
						}
					},

					"401": {
						"description": "Not authorized"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/user/current": {
			"get": {
				"tags": ["User"],
				"summary": "Get data about user",
				"operationId": "getCurrentUserData",
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"schema": {
							"type": "string"
						},
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/BadRequest"
					},
					"404": {
						"description": "user not found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"default": 404
										},
										"message": {
											"type": "string",
											"default": "User not found"
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},

		"/user/subscription": {
			"patch": {
				"tags": ["User"],
				"summary": "Update User Subscription",
				"operationId": "updateUserSubscription",
				"requestBody": {
					"description": "Send value to update subscription",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"subscription": {
										"type": "boolean",
										"example": true
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"example": 200
										},
										"message": {
											"type": "string",
											"example": "Subscription updated successfuly"
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/MissedRequiredFields"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/user/verify": {
			"post": {
				"tags": ["User"],
				"summary": "Resend verification token in case user wasn't verificated",
				"description": "Resend verification email",
				"operationId": "resendVerificationEmail",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"example": "example@gmail.com"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Verification email sent"
					},
					"400": {
						"description": "Verification has already been passed"
					},
					"404": {
						"description": "User not found"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/user/{verificationToken}": {
			"get": {
				"tags": ["User"],
				"summary": "Verificate user by email",
				"operationId": "verificateUser",
				"description": "",
				"parameters": [
					{
						"name": "verificationToken",
						"in": "path",
						"description": "Verification comes from the link after click",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Verification successful"
					},
					"400": {
						"description": "Verification has already been passed"
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		},
		"/user/favorites": {
			"get": {
				"tags": ["User"],
				"responses": {
					"200": {
						"description": "successfull operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"example": 200
										},
										"message": {
											"type": "string",
											"example": "Success"
										},
										"recipes": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"_id": {
														"type": "string"
													},
													"title": {
														"type": "string",
														"example": "Mediterranean Pasta Salad"
													},
													"instructions": {
														"type": "string",
														"example": "Bring a large saucepan of salted water to the boil\r\nAdd the pasta, stir once and cook for about 10 minutes or as directed on the packet.\r\nMeanwhile, wash the tomatoes and cut into quarters. Slice the olives. Wash the basil.\r\nPut the tomatoes into a salad bowl and tear the basil leaves over them. Add a tablespoon of olive oil and mix.\r\nWhen the pasta is ready, drain into a colander and run cold water over it to cool it quickly.\r\nToss the pasta into the salad bowl with the tomatoes and basil.\r\nAdd the sliced olives, drained mozzarella balls, and chunks of tuna. Mix well and let the salad rest for at least half an hour to allow the flavours to mingle.\r\nSprinkle the pasta with a generous grind of black pepper and drizzle with the remaining olive oil just before serving."
													},
													"description": {
														"type": "string",
														"example": "A salad made with pasta, vegetables (such as tomatoes, cucumbers, and olives), feta cheese, and a dressing made with olive oil and lemon juice."
													},
													"time": {
														"type": "string",
														"example": "27"
													}
												}
											}
										},
										"totalItems": {
											"type": "integer",
											"example": 1,
											"default": 0
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			},
			"patch": {
				"tags": ["User"],
				"description": "Remove recipe from favorite",
				"requestBody": {
					"description": "ID of removed recipe frome favorites",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"recipeId": {
										"type": "string",
										"required": true
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "returns Id of removed or added recipe",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"recipeId": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/RecipeNotFoundError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/user/own-recipes": {
			"get": {
				"tags": ["User"],
				"summary": "Get user own recipes",
				"operationId": "getOwnRecipes",
				"responses": {
					"200": {
						"$ref": "#/components/schemas/Recipes"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/user/shopping-list": {
			"get": {
				"tags": ["User"],
				"parameters": [
					{
						"in": "header",
						"name": "Authorization",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"operationId": "getUserShopinList",
				"responses": {
					"200": {
						"description": "A list of ingredients that were added to the shopping list",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"example": 200
										},
										"message": {
											"type": "string",
											"default": "Success"
										},
										"data": {
											"type": "object",
											"properties": {
												"shoppingList": { "$ref": "#/components/schemas/RecipeIngredients" }
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"description": "Not found!",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			},
			"patch": {
				"tags": ["User"],
				"operationId": "updateShoppingList",
				"requestBody": {
					"required": true,
					"description": "Give only id of ingredient  and measure for add and only id for remove",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": ["id"],
								"properties": {
									"ingredientId": {
										"type": "string"
									},
									"measure": {
										"type": "string",
										"example": "2 tbs"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Shopping list updated. Returns or added Ingredient object or 'removedIngredientId'",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"type": "object",
											"properties": {
												"status": {
													"type": "integer",
													"example": 200
												},
												"message": {
													"type": "string",
													"example": "Success"
												},
												"addedIngredient": {
													"$ref": "#/components/schemas/RecipeIngredient"
												}
											}
										},
										{
											"type": "object",
											"properties": {
												"status": {
													"type": "integer",
													"example": 200
												},
												"message": {
													"type": "string",
													"example": "Success"
												},
												"data": {
													"type": "object",
													"properties": {
														"removedIngredientId": {
															"type": "string"
														}
													}
												}
											}
										}
									]
								}
							}
						}
					},

					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"description": "Ingredient not found!",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"default": 404
										},
										"message": {
											"type": "string",
											"example": "Failed to update! Ingredient not found!"
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/recipes/popular-recipes": {
			"get": {
				"tags": ["Recipes"],
				"description": "get recipes that added more users",
				"responses": {
					"200": {
						"description": "returns 4 most popular recipes",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/RecipeSmalResult"
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/RecipesNotFoundError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/recipes": {
			"post": {
				"tags": ["Recipes"],
				"summary": "Create new recipe",
				"operationId": "createNewRecipe",
				"requestBody": {
					"description": "Create new recipe",
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/Recipe"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Recipe"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/MissedRequiredFields"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			},
			"delete": {
				"tags": ["Recipes"],
				"summary": "Remove own recipe",
				"operationId": "removeOwnRecipe",
				"requestBody": {
					"description": "Pass id of recipe that want to delete",
					"required": ["recipeId"],
					"content": {
						"application/json": {
							"schema": {
								"recipeId": {
									"type": "string"
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "success",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": 204
										},
										"message": {
											"type": "string",
											"example": "Removed Successfully"
										},
										"data": {
											"type": "object",
											"properties": {
												"removedRecipeId": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},

					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"403": {
						"description": "Can remove only own recipes",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"example": 403
										},
										"message": {
											"type": "string",
											"example": "Failed! Can delete only own recipes"
										}
									}
								}
							}
						}
					},
					"404": {
						"$ref": "#/components/responses/RecipesNotFoundError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/recipes/{id}": {
			"get": {
				"tags": ["Recipes"],
				"description": "Get Recipe by id",
				"summary": "Return recipe with given id",
				"operationId": "getRecipeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "pass recipe id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"status": {
													"type": "integer",
													"default": 200
												},
												"message": {
													"type": "string",
													"default": "Success"
												},
												"recipe": {
													"$ref": "#/components/schemas/Recipe"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/RecipeNotFoundError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/recipes/category/{category}": {
			"get": {
				"tags": ["Recipes"],
				"summary": "Get recipes by category",
				"description": "Return 8 recipes with given category for each page",
				"operationId": "getRecipesByCategory",
				"parameters": [
					{
						"name": "category",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Category"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "pass the page number",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "A list of recipes in category",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RecipeSmalResult"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"description": "Category not found!",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"example": 404
										},
										"message": {
											"type": "string",
											"example": "Category not found!"
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/recipes/category-list": {
			"get": {
				"tags": ["Recipes"],
				"description": "returns list of categories",
				"responses": {
					"200": {
						"description": "returned category list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Categories"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"description": "Category not found!",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"example": 404
										},
										"message": {
											"type": "string",
											"example": "Categories not found!"
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/recipes/main-page": {
			"get": {
				"tags": ["Recipes"],
				"description": "get recipes for homepage",
				"responses": {
					"200": {
						"description": "returns 4 recipes for each category",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "integer",
											"example": 200
										},
										"message": {
											"type": "string",
											"example": "Success"
										},
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"_id": {
														"type": "string",
														"example": "Beef"
													},
													"recipes": {
														"$ref": "#/components/schemas/RecipeCards"
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/RecipesNotFoundError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/search": {
			"get": {
				"summary": "search recipe by recipe name or by ingredients",
				"parameters": [
					{
						"name": "title",
						"in": "query",
						"schema": {
							"type": "string"
						},
						"description": "recipe title"
					},
					{
						"name": "ingredient",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "returned recipes by search value",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Recipes"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/RecipesNotFoundError"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		},
		"/ingredients": {
			"get": {
				"summary": "Ingredients list returns",
				"description": "get list of ingredients",
				"responses": {
					"200": {
						"description": "returns full list of ingredients",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Ingredients"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/UnauthorizedError"
					},
					"404": {
						"$ref": "#/components/responses/NotFoundCommon"
					}
				},
				"security": [
					{
						"jwtAuth": []
					}
				]
			}
		}
	},
	"components": {
		"schemas": {
			"AuthResponse": {
				"type": "object",
				"properties": {
					"user": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string",
								"description": "The user ID."
							},
							"name": {
								"type": "string",
								"description": "The user name."
							},
							"email": {
								"type": "string",
								"example": "example@gmail.com"
							},
							"avatar": {
								"type": "string",
								"description": "Url to avatar"
							},
							"verifyEmail": {
								"type": "boolean",
								"description": "Define if user verified his account via email",
								"default": false
							}
						}
					},
					"token": {
						"type": "string"
					}
				}
			},
			"User": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string",
						"description": "User ID in BD"
					},
					"email": {
						"type": "string",
						"example": "example@gmail.com"
					},
					"avatarUrl": {
						"type": "string",
						"example": "public/avatars/63fdff3a26519186b34fdd81.wmark-kievrealty"
					},
					"favoriteRecipes": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"verify": {
						"type": "boolean",
						"example": false
					}
				}
			},
			"RecipeSmalResult": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string"
					},
					"title": {
						"type": "string",
						"example": "Macaroon"
					},
					"instructions": {
						"type": "string",
						"example": "Put 2 tablespoons of the oil in a large pot over medium heat. When it’s hot, add onion, carrot, celery and garlic; sprinkle with salt and pepper and cook, stirring occasionally, until vegetables are soft, 5 to 10 minutes...."
					},
					"preview": {
						"type": "string"
					}
				}
			},
			"RecipeCards": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/RecipeCard"
				}
			},
			"RecipeCard": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string"
					},
					"title": {
						"type": "string",
						"example": "Macaroon"
					},

					"thumb": {
						"type": "string"
					}
				}
			},
			"Recipe": {
				"type": "object",
				"required": ["recipeTitle", "description", "category", "cookingTime", "ingredients", "preparation", "image"],
				"properties": {
					"_id": {
						"type": "string"
					},
					"title": {
						"type": "string",
						"example": "Macaroon"
					},
					"description": {
						"type": "string",
						"example": "it's an awesome cookies"
					},
					"category": {
						"type": "string",
						"example": "dessert"
					},
					"cookingTime": {
						"type": "string",
						"default": "2 hours"
					},
					"favorites": {
						"type": "array",
						"items": {
							"type": "string",
							"default": "user id's"
						}
					},
					"popularity": {
						"description": "Depends on how many users added it to favorite",
						"type": "integer",
						"default": 0
					},
					"ingredients": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/RecipeIngredients"
						}
					},
					"preparation": {
						"type": "string",
						"example": "beat eggs until smooth"
					},
					"image": {
						"type": "string",
						"format": "binary"
					},
					"owner": {
						"type": "string",
						"example": "Owner's id"
					}
				}
			},
			"RecipeWithFavoritesCount": {
				"type": "object",
				"required": ["title", "description", "category", "cookingTime", "ingredients", "preparation", "image"],
				"properties": {
					"_id": {
						"type": "string"
					},
					"title": {
						"type": "string",
						"example": "Macaroon"
					},
					"description": {
						"type": "string",
						"example": "it's an awesome cookies"
					},
					"category": {
						"type": "string",
						"example": "dessert"
					},
					"time": {
						"type": "string"
					},
					"ingredients": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/RecipeIngredients"
						}
					},
					"preparation": {
						"type": "string",
						"example": "beat eggs until smooth"
					},
					"image": {
						"type": "string",
						"format": "binary"
					},
					"addedToFavoritesCount": {
						"type": "integer",
						"example": 0,
						"default": 0
					}
				}
			},
			"Recipes": {
				"type": "array",
				"items": {
					"oneOf": [
						{
							"$ref": "#/components/schemas/Recipe"
						},
						{
							"$ref": "#/components/schemas/RecipeWithFavoritesCount"
						}
					]
				}
			},
			"Categories": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Category"
				}
			},
			"Category": {
				"type": "string",
				"enum": [
					"Beef",
					"Breakfast",
					"Dessert",
					"Goat",
					"Lamb",
					"Miscellaneous",
					"Vegan",
					"Chicken",
					"Pasta",
					"Pork",
					"SeaFood",
					"Side"
				]
			},
			"RecipeIngredient": {
				"type": "object",
				"required": ["name", "measure"],
				"properties": {
					"_id": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"example": "eggs"
					},
					"measure": {
						"type": "string",
						"example": "2 tbs"
					},
					"image": {
						"type": "string",
						"example": "https://res.cloudinary.com/ddbvbv5sp/image/upload/v1678564856/ppyhvetrcdcexkwcgaj3.png"
					},
					"family": {
						"type": "string"
					}
				}
			},
			"RecipeIngredients": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/RecipeIngredient"
				}
			},
			"Ingredient": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"example": "eggs"
					},
					"family": {
						"type": "string",
						"example": "Bread"
					},
					"image": {
						"type": "string",
						"example": "https://res.cloudinary.com/ddbvbv5sp/image/upload/v1678564856/ppyhvetrcdcexkwcgaj3.png"
					}
				}
			},
			"Ingredients": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Ingredient"
				}
			}
		},
		"responses": {
			"NotFoundCommon": {
				"description": "Not found",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"status": {
									"type": "integer",
									"example": 404
								},
								"message": {
									"type": "string",
									"example": "Not found!"
								}
							}
						}
					}
				}
			},
			"RecipesNotFoundError": {
				"description": "Recipe not found",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"status": {
									"type": "integer",
									"example": 404
								},
								"message": {
									"type": "string",
									"example": "Recipes not found!"
								}
							}
						}
					}
				}
			},

			"RecipeNotFoundError": {
				"description": "Recipe not found",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"status": {
									"type": "integer",
									"example": 404
								},
								"message": {
									"type": "string",
									"example": "Recipe not found!"
								}
							}
						}
					}
				}
			},
			"MissedRequiredFields": {
				"description": "Missed required fields",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"status": {
									"type": "integer",
									"example": 400
								},
								"message": {
									"type": "string",
									"example": "Missed required fields"
								}
							}
						}
					}
				}
			},
			"UnauthorizedError": {
				"description": "Access token is missing or invalid",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"status": {
									"type": "integer",
									"example": 401
								},
								"message": {
									"type": "string",
									"example": "Access token is missing or invalid"
								}
							}
						}
					}
				}
			},
			"BadRequest": {
				"description": "Bad request!",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"status": {
									"type": "integer",
									"example": 400
								},
								"message": {
									"type": "string",
									"example": "Bad request!"
								}
							}
						}
					}
				}
			},
			"GetRecipesResponse": {
				"description": "get Recipes",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Recipes"
						}
					}
				}
			}
		},
		"securitySchemes": {
			"jwtAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"security": [
		{
			"jwtAuth": []
		}
	]
}
